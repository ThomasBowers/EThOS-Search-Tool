Inferring Useful Static Types for Duck Typed Languages
Complete and precise identification of types is essential to the effectiveness
of programming aids such as refactoring or code completion. Existing ap-
proaches that target dynamically typed languages infer types using flow
analysis, but flow analysis does not cope well with heavily used features
such as heterogeneous containers and implicit interfaces.
Our solution makes the assumption that programs that are known to work
do not encounter run-time type errors which allows us to derive extra type
information from the way values are used, rather than simply where those
values originate. This is in keeping with the duck typing philosophy of
many dynamically typed languages.
The information we derive must be conservative, so we describe and for-
malise a technique to freeze the duck type of a variable using the features,
such as named methods, that are provably present on any run of the pro-
gram. Development environments can use these sets of features to provide
code-completion suggestions and API documentation, amongst other things.
We show that these sets of features can be used to refine imprecise flow anal-
ysis results by using the frozen duck type to perform a structural type-cast.
We first formalise this for an idealised duck-typed language semantics and
then show to what extent the technique would work for a real-world lan-
guage, Python. We demonstrate its effectiveness by performing an analysis
of several real-world Python programs which shows that we can infer the
types of method-call receivers more precisely than can flow analysis alone.
